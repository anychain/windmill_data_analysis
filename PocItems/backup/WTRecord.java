/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.ibm.poc;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class WTRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WTRecord\",\"namespace\":\"io.esse.ibm.poc\",\"fields\":[{\"name\":\"recordtime\",\"type\":\"string\"},{\"name\":\"wtid\",\"type\":[\"string\",\"null\"]},{\"name\":\"switchitems\",\"type\":{\"type\":\"array\",\"items\":\"boolean\"}},{\"name\":\"simitems\",\"type\":{\"type\":\"array\",\"items\":\"float\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence recordtime;
  @Deprecated public java.lang.CharSequence wtid;
  @Deprecated public java.util.List<java.lang.Boolean> switchitems;
  @Deprecated public java.util.List<java.lang.Float> simitems;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public WTRecord() {}

  /**
   * All-args constructor.
   */
  public WTRecord(java.lang.CharSequence recordtime, java.lang.CharSequence wtid, java.util.List<java.lang.Boolean> switchitems, java.util.List<java.lang.Float> simitems) {
    this.recordtime = recordtime;
    this.wtid = wtid;
    this.switchitems = switchitems;
    this.simitems = simitems;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return recordtime;
    case 1: return wtid;
    case 2: return switchitems;
    case 3: return simitems;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: recordtime = (java.lang.CharSequence)value$; break;
    case 1: wtid = (java.lang.CharSequence)value$; break;
    case 2: switchitems = (java.util.List<java.lang.Boolean>)value$; break;
    case 3: simitems = (java.util.List<java.lang.Float>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'recordtime' field.
   */
  public java.lang.CharSequence getRecordtime() {
    return recordtime;
  }

  /**
   * Sets the value of the 'recordtime' field.
   * @param value the value to set.
   */
  public void setRecordtime(java.lang.CharSequence value) {
    this.recordtime = value;
  }

  /**
   * Gets the value of the 'wtid' field.
   */
  public java.lang.CharSequence getWtid() {
    return wtid;
  }

  /**
   * Sets the value of the 'wtid' field.
   * @param value the value to set.
   */
  public void setWtid(java.lang.CharSequence value) {
    this.wtid = value;
  }

  /**
   * Gets the value of the 'switchitems' field.
   */
  public java.util.List<java.lang.Boolean> getSwitchitems() {
    return switchitems;
  }

  /**
   * Sets the value of the 'switchitems' field.
   * @param value the value to set.
   */
  public void setSwitchitems(java.util.List<java.lang.Boolean> value) {
    this.switchitems = value;
  }

  /**
   * Gets the value of the 'simitems' field.
   */
  public java.util.List<java.lang.Float> getSimitems() {
    return simitems;
  }

  /**
   * Sets the value of the 'simitems' field.
   * @param value the value to set.
   */
  public void setSimitems(java.util.List<java.lang.Float> value) {
    this.simitems = value;
  }

  /** Creates a new WTRecord RecordBuilder */
  public static com.ibm.poc.WTRecord.Builder newBuilder() {
    return new com.ibm.poc.WTRecord.Builder();
  }
  
  /** Creates a new WTRecord RecordBuilder by copying an existing Builder */
  public static com.ibm.poc.WTRecord.Builder newBuilder(com.ibm.poc.WTRecord.Builder other) {
    return new com.ibm.poc.WTRecord.Builder(other);
  }
  
  /** Creates a new WTRecord RecordBuilder by copying an existing WTRecord instance */
  public static com.ibm.poc.WTRecord.Builder newBuilder(com.ibm.poc.WTRecord other) {
    return new com.ibm.poc.WTRecord.Builder(other);
  }
  
  /**
   * RecordBuilder for WTRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WTRecord>
    implements org.apache.avro.data.RecordBuilder<WTRecord> {

    private java.lang.CharSequence recordtime;
    private java.lang.CharSequence wtid;
    private java.util.List<java.lang.Boolean> switchitems;
    private java.util.List<java.lang.Float> simitems;

    /** Creates a new Builder */
    private Builder() {
      super(com.ibm.poc.WTRecord.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.ibm.poc.WTRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.recordtime)) {
        this.recordtime = data().deepCopy(fields()[0].schema(), other.recordtime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.wtid)) {
        this.wtid = data().deepCopy(fields()[1].schema(), other.wtid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.switchitems)) {
        this.switchitems = data().deepCopy(fields()[2].schema(), other.switchitems);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.simitems)) {
        this.simitems = data().deepCopy(fields()[3].schema(), other.simitems);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing WTRecord instance */
    private Builder(com.ibm.poc.WTRecord other) {
            super(com.ibm.poc.WTRecord.SCHEMA$);
      if (isValidValue(fields()[0], other.recordtime)) {
        this.recordtime = data().deepCopy(fields()[0].schema(), other.recordtime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.wtid)) {
        this.wtid = data().deepCopy(fields()[1].schema(), other.wtid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.switchitems)) {
        this.switchitems = data().deepCopy(fields()[2].schema(), other.switchitems);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.simitems)) {
        this.simitems = data().deepCopy(fields()[3].schema(), other.simitems);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'recordtime' field */
    public java.lang.CharSequence getRecordtime() {
      return recordtime;
    }
    
    /** Sets the value of the 'recordtime' field */
    public com.ibm.poc.WTRecord.Builder setRecordtime(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.recordtime = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'recordtime' field has been set */
    public boolean hasRecordtime() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'recordtime' field */
    public com.ibm.poc.WTRecord.Builder clearRecordtime() {
      recordtime = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'wtid' field */
    public java.lang.CharSequence getWtid() {
      return wtid;
    }
    
    /** Sets the value of the 'wtid' field */
    public com.ibm.poc.WTRecord.Builder setWtid(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.wtid = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'wtid' field has been set */
    public boolean hasWtid() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'wtid' field */
    public com.ibm.poc.WTRecord.Builder clearWtid() {
      wtid = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'switchitems' field */
    public java.util.List<java.lang.Boolean> getSwitchitems() {
      return switchitems;
    }
    
    /** Sets the value of the 'switchitems' field */
    public com.ibm.poc.WTRecord.Builder setSwitchitems(java.util.List<java.lang.Boolean> value) {
      validate(fields()[2], value);
      this.switchitems = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'switchitems' field has been set */
    public boolean hasSwitchitems() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'switchitems' field */
    public com.ibm.poc.WTRecord.Builder clearSwitchitems() {
      switchitems = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'simitems' field */
    public java.util.List<java.lang.Float> getSimitems() {
      return simitems;
    }
    
    /** Sets the value of the 'simitems' field */
    public com.ibm.poc.WTRecord.Builder setSimitems(java.util.List<java.lang.Float> value) {
      validate(fields()[3], value);
      this.simitems = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'simitems' field has been set */
    public boolean hasSimitems() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'simitems' field */
    public com.ibm.poc.WTRecord.Builder clearSimitems() {
      simitems = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public WTRecord build() {
      try {
        WTRecord record = new WTRecord();
        record.recordtime = fieldSetFlags()[0] ? this.recordtime : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.wtid = fieldSetFlags()[1] ? this.wtid : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.switchitems = fieldSetFlags()[2] ? this.switchitems : (java.util.List<java.lang.Boolean>) defaultValue(fields()[2]);
        record.simitems = fieldSetFlags()[3] ? this.simitems : (java.util.List<java.lang.Float>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
